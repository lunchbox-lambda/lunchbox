import { Container } from 'inversify';
import { TYPES } from 'lib/inversify';

import { Broadcaster } from 'lib/broadcaster';
import { ComputerInit } from 'lib/computer-init';
import { DataSync } from 'lib/data-sync';
import { JSONValidator } from 'lib/json-validator';
import { NodeRed } from 'lib/node-red';
import { Repository } from 'lib/repository';
import { Scheduler } from 'lib/scheduler';
import { ServiceHolder } from 'lib/service-holder';
import { Socket } from 'lib/socket';
import { Firmware } from 'firmware';
import { CommandCenter } from 'kernel/command-center';
import { Controllers } from 'kernel/controllers';
import { Environment } from 'kernel/environment';
import { Peripherals } from 'kernel/peripherals';
import { Persistence } from 'kernel/persistence';
import { RecipeManager } from 'kernel/recipe-manager';
import { Transmitter } from 'kernel/transmitter';
import { CameraService } from 'services/cameras';
import { ComputerService } from 'services/computers';
import { DiagnosticsService } from 'services/diagnostics';
import { EnvironmentService } from 'services/environments';
import { FixtureTypeService } from 'services/fixture-types';
import { RecipeService } from 'services/recipes';
import { VariableService } from 'services/variables';
import { WebApi } from 'webapi';
import { Router } from 'webapi/router';

import DefaultBroadcaster from 'lib/broadcaster/default';
import DefaultComputerInit from 'lib/computer-init/default';
import DefaultDataSync from 'lib/data-sync/default';
import DefaultJSONValidator from 'lib/json-validator/default';
import DefaultNodeRed from 'lib/node-red/default';
import LevelDB from 'lib/repository/leveldb';
import DefaultScheduler from 'lib/scheduler/default';
import DefaultServiceHolder from 'lib/service-holder/default';
import SocketIO from 'lib/socket/socket-io';
import DefaultFirmware from 'firmware/default';
import DefaultCommandCenter from 'kernel/command-center/default';
import DefaultControllers from 'kernel/controllers/default';
import DefaultEnvironment from 'kernel/environment/default';
import DefaultPeripherals from 'kernel/peripherals/default';
import DefaultPersistence from 'kernel/persistence/default';
import DefaultRecipeManager from 'kernel/recipe-manager/default';
import DefaultTransmitter from 'kernel/transmitter/default';
import DefaultCameraService from 'services/cameras/default';
import DefaultComputerService from 'services/computers/default';
import DefaultDiagnosticsService from 'services/diagnostics/default';
import DefaultEnvironmentService from 'services/environments/default';
import DefaultFixtureTypeService from 'services/fixture-types/default';
import DefaultRecipeService from 'services/recipes/default';
import DefaultVariableService from 'services/variables/default';
import DefaultWebApi from 'webapi/default';
import DefaultRouter from 'webapi/router/default';

const container = new Container({ defaultScope: 'Singleton' });

container.bind<Broadcaster>(TYPES.Broadcaster).to(DefaultBroadcaster);
container.bind<ComputerInit>(TYPES.ComputerInit).to(DefaultComputerInit);
container.bind<DataSync>(TYPES.DataSync).to(DefaultDataSync);
container.bind<JSONValidator>(TYPES.JSONValidator).to(DefaultJSONValidator);
container.bind<NodeRed>(TYPES.NodeRed).to(DefaultNodeRed);
container.bind<Repository>(TYPES.Repository).to(LevelDB);
container.bind<Scheduler>(TYPES.Scheduler).to(DefaultScheduler);
container.bind<ServiceHolder>(TYPES.ServiceHolder).to(DefaultServiceHolder);
container.bind<Socket>(TYPES.Socket).to(SocketIO);
container.bind<Firmware>(TYPES.Firmware).to(DefaultFirmware);
container.bind<CommandCenter>(TYPES.CommandCenter).to(DefaultCommandCenter);
container.bind<Controllers>(TYPES.Controllers).to(DefaultControllers);
container.bind<Environment>(TYPES.Environment).to(DefaultEnvironment);
container.bind<Peripherals>(TYPES.Peripherals).to(DefaultPeripherals);
container.bind<Persistence>(TYPES.Persistence).to(DefaultPersistence);
container.bind<RecipeManager>(TYPES.RecipeManager).to(DefaultRecipeManager);
container.bind<Transmitter>(TYPES.Transmitter).to(DefaultTransmitter);
container.bind<CameraService>(TYPES.CameraService).to(DefaultCameraService);
container.bind<ComputerService>(TYPES.ComputerService).to(DefaultComputerService);
container.bind<DiagnosticsService>(TYPES.DiagnosticsService).to(DefaultDiagnosticsService);
container.bind<EnvironmentService>(TYPES.EnvironmentService).to(DefaultEnvironmentService);
container.bind<FixtureTypeService>(TYPES.FixtureTypeService).to(DefaultFixtureTypeService);
container.bind<RecipeService>(TYPES.RecipeService).to(DefaultRecipeService);
container.bind<VariableService>(TYPES.VariableService).to(DefaultVariableService);
container.bind<WebApi>(TYPES.WebApi).to(DefaultWebApi);
container.bind<Router>(TYPES.Router).to(DefaultRouter);

export default container;
